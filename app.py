import streamlit as st
import pandas as pd
import importlib.util
import subprocess
import sys
import os
from io import StringIO


def install_library(library_name):
    try:

        if importlib.util.find_spec(library_name) is None:
            st.warning(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {library_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", library_name])
            st.success(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {library_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            pass 
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {library_name}: {str(e)}")
        st.stop()


required_libraries = ["plotly", "pandas", "streamlit"]


for lib in required_libraries:
    install_library(lib)


import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="IMDB 5000 Movie Analytics", layout="wide")

@st.cache_data
def load_data():
    try:
        file_path = 'data/movie_metadata.csv'
        if not os.path.exists(file_path):
            st.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
        df = pd.read_csv(file_path)

        df['genres'] = df['genres'].fillna('Unknown')
        df['actor_1_name'] = df['actor_1_name'].fillna('Unknown')
        df['actor_2_name'] = df['actor_2_name'].fillna('Unknown')
        df['actor_3_name'] = df['actor_3_name'].fillna('Unknown')
        df['title_year'] = df['title_year'].fillna(0).astype(int)
        df['budget'] = df['budget'].fillna(0)
        df['gross'] = df['gross'].fillna(0)
        df['imdb_score'] = df['imdb_score'].fillna(0)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return pd.DataFrame()

df = load_data()

if not isinstance(df, pd.DataFrame) or df.empty:
    st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DataFrame")
    st.stop()

st.title("üé¨ IMDB 5000 Movie Analytics Dashboard")
st.markdown("""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ IMDB 5000.
* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [IMDB 5000 Movie Dataset](https://www.kaggle.com/datasets/carolzhangdc/imdb-5000-movie-dataset)
* –ê–≤—Ç–æ—Ä: [ast_57]
""")

with st.sidebar:
    st.header("–§–∏–ª—å—Ç—Ä—ã")
    
    min_year = 1900
    max_year = 2020
    if 'title_year' in df.columns:
        min_year = int(df[df['title_year'] > 0]['title_year'].min())
        max_year = int(df[df['title_year'] > 0]['title_year'].max())

    year_range = st.slider(
        "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        min_year, max_year,
        (min_year, max_year)
    )
    
    genres = ['All'] + sorted(set([genre.strip() for genres in df['genres'].str.split('|') for genre in genres if genre]))
    selected_genres = st.multiselect(
        "–ñ–∞–Ω—Ä—ã",
        options=genres,
        default=['All']
    )
    
    actors = ['All'] + sorted(set(df['actor_1_name'].tolist() + df['actor_2_name'].tolist() + df['actor_3_name'].tolist()))
    selected_actors = st.multiselect(
        "–ê–∫—Ç–µ—Ä—ã",
        options=actors,
        default=['All']
    )
    
    search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞")
    show_stats = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    

    plot_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
        ["–ë—é–¥–∂–µ—Ç vs –°–±–æ—Ä—ã (–°–∫–∞—Ç—Ç–µ—Ä)", "–°–±–æ—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º (Box)", "–¢—Ä–µ–Ω–¥—ã –ø–æ –≥–æ–¥–∞–º (–õ–∏–Ω–µ–π–Ω—ã–π)", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞)"]
    )

try:
    filtered_data = df.copy()
    
    filtered_data = filtered_data[filtered_data['title_year'].between(year_range[0], year_range[1])]
    
    if 'All' not in selected_genres:
        filtered_data = filtered_data[
            filtered_data['genres'].str.contains('|'.join(selected_genres), case=False, na=False)
        ]
    
    if 'All' not in selected_actors:
        filtered_data = filtered_data[
            (filtered_data['actor_1_name'].isin(selected_actors)) |
            (filtered_data['actor_2_name'].isin(selected_actors)) |
            (filtered_data['actor_3_name'].isin(selected_actors))
        ]
    
    if search_query:
        filtered_data = filtered_data[
            filtered_data['movie_title'].str.contains(search_query, case=False, na=False)
        ]

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    filtered_data = df.copy()

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤", len(filtered_data))

with col2:
    avg_score = filtered_data['imdb_score'].mean()
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ IMDB", f"{avg_score:.1f}" if pd.notna(avg_score) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

with col3:
    try:
        roi_data = filtered_data[(filtered_data['budget'] >= 1000) & (filtered_data['gross'] > 0)]
        if not roi_data.empty:
            roi = ((roi_data['gross'] - roi_data['budget']) / roi_data['budget']).median() * 100
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π ROI", f"{roi:.1f}%" if pd.notna(roi) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π ROI", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception:
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π ROI", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

if show_stats and not filtered_data.empty:
    st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.write(f"**–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∂–∞–Ω—Ä:** {pd.Series([genre for genres in filtered_data['genres'].str.split('|') for genre in genres]).value_counts().index[0]}")
    st.write(f"**–°–∞–º—ã–π —á–∞—Å—Ç—ã–π –∞–∫—Ç–µ—Ä:** {pd.concat([filtered_data['actor_1_name'], filtered_data['actor_2_name'], filtered_data['actor_3_name']]).value_counts().index[0]}")
    st.write(f"**–°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç:** ${filtered_data['budget'].mean():,.0f}")
    st.write(f"**–°—Ä–µ–¥–Ω–∏–µ —Å–±–æ—Ä—ã:** ${filtered_data['gross'].mean():,.0f}")

st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
if not filtered_data.empty:
    try:
        if plot_type == "–ë—é–¥–∂–µ—Ç vs –°–±–æ—Ä—ã (–°–∫–∞—Ç—Ç–µ—Ä)":
            fig = px.scatter(
                filtered_data,
                x='budget',
                y='gross',
                color='imdb_score',
                size='imdb_score',
                hover_data=['movie_title', 'budget', 'gross', 'imdb_score'],
                log_x=True,
                log_y=True,
                title="–ë—é–¥–∂–µ—Ç vs –°–±–æ—Ä—ã (—Ü–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ IMDB)",
                labels={'budget': '–ë—é–¥–∂–µ—Ç ($)', 'gross': '–°–±–æ—Ä—ã ($)', 'imdb_score': 'IMDB Score'},
                color_continuous_scale='Viridis',
                template='plotly_dark'
            )
            fig.update_layout(
                xaxis_tickformat='$%,.0f',
                yaxis_tickformat='$%,.0f',
                showlegend=True,
                margin=dict(l=50, r=50, t=50, b=50)
            )

        elif plot_type == "–°–±–æ—Ä—ã –ø–æ –∂–∞–Ω—Ä–∞–º (Box)":
            genre_data = filtered_data[['gross', 'genres']].copy()
            genre_data['genres'] = genre_data['genres'].str.split('|')
            genre_data = genre_data.explode('genres')
            top_genres = genre_data['genres'].value_counts().head(10).index
            genre_data = genre_data[genre_data['genres'].isin(top_genres)]
            
            fig = px.box(
                genre_data,
                x='genres',
                y='gross',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–±–æ—Ä–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º (–¢–æ–ø-10)",
                labels={'genres': '–ñ–∞–Ω—Ä', 'gross': '–°–±–æ—Ä—ã ($)'},
                template='plotly_dark',
                color='genres',
                color_discrete_sequence=px.colors.qualitative.Set2
            )
            fig.update_layout(
                yaxis_tickformat='$%,.0f',
                showlegend=False,
                margin=dict(l=50, r=50, t=50, b=50)
            )

        elif plot_type == "–¢—Ä–µ–Ω–¥—ã –ø–æ –≥–æ–¥–∞–º (–õ–∏–Ω–µ–π–Ω—ã–π)":
            yearly_data = filtered_data.groupby('title_year')[['budget', 'gross']].mean().reset_index()
            yearly_data = yearly_data[yearly_data['title_year'] > 0]
            
            fig = go.Figure()
            fig.add_trace(
                go.Scatter(
                    x=yearly_data['title_year'],
                    y=yearly_data['budget'],
                    name='–°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç',
                    line=dict(color='blue')
                )
            )
            fig.add_trace(
                go.Scatter(
                    x=yearly_data['title_year'],
                    y=yearly_data['gross'],
                    name='–°—Ä–µ–¥–Ω–∏–µ —Å–±–æ—Ä—ã',
                    line=dict(color='orange')
                )
            )
            fig.update_layout(
                title="–¢—Ä–µ–Ω–¥—ã —Å—Ä–µ–¥–Ω–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –∏ —Å–±–æ—Ä–æ–≤ –ø–æ –≥–æ–¥–∞–º",
                xaxis_title="–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
                yaxis_title="–°—É–º–º–∞ ($)",
                yaxis_tickformat='$%,.0f',
                template='plotly_dark',
                showlegend=True,
                margin=dict(l=50, r=50, t=50, b=50)
            )

        elif plot_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞)":
            fig = px.histogram(
                filtered_data,
                x='imdb_score',
                nbins=20,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ IMDB",
                labels={'imdb_score': '–†–µ–π—Ç–∏–Ω–≥ IMDB', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤'},
                template='plotly_dark',
                color_discrete_sequence=['teal']
            )
            fig.update_layout(
                showlegend=False,
                margin=dict(l=50, r=50, t=50, b=50)
            )

        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")
        st.stop()

st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
if not filtered_data.empty:
    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_data)} —Ñ–∏–ª—å–º–æ–≤")
    st.dataframe(filtered_data[['movie_title', 'genres', 'actor_1_name', 'actor_2_name', 'actor_3_name', 'imdb_score', 'budget', 'gross']])
    
    csv = filtered_data.to_csv(index=False)
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
        data=csv,
        file_name="imdb_filtered_data.csv",
        mime="text/csv"
    )
else:
    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.")